{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","global","font","family","size","height","getRandomElements","result","arr","dontSelectArr","n","_loop","i","Math","floor","random","length","skip","forEach","img","link","push","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","album","imgurAlbum","showImages","selectedImages","rejectedImages","updateAlbum","bind","assertThisInitialized","updateN","fetchImages","event","setState","target","value","Number","_this2","fetch","concat","headers","Authorization","then","response","json","data","images","newSelections","slice","newRejections","ShowImages","newShowImages","image","console","log","_this3","imagesView","map","react_default","a","createElement","key","id","className","Anchor","href","primary","label","onClick","selectImage","removeImage","Image","fit","src","linksView","rejectedView","Grommet","Grid","areas","name","start","end","columns","rows","gap","Box","gridArea","background","align","justify","as","margin","top","FormField","TextInput","placeholder","onChange","Button","reverse","clearSelections","clearRejected","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d2b9f66.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {\n  Grommet,\n  Box,\n  Grid,\n  FormField,\n  TextInput,\n  Button,\n  Image,\n  Anchor,\n} from 'grommet';\nimport './App.css';\n\nconst theme = {\n  global: {\n    font: {\n      family: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;',\n      size: '14px',\n      height: '20px',\n    },\n  },\n};\n\nconst getRandomElements = (result, arr, dontSelectArr, n) => {\n  while (\n    result.length < n &&\n    result.length < arr.length - dontSelectArr.length\n  ) {\n    const i = Math.floor (Math.random () * arr.length);\n    var skip = false;\n\n    result.forEach (img => {\n      if (img.link === arr[i].link) {\n        skip = true;\n      }\n    });\n    if (skip) continue;\n\n    dontSelectArr.forEach (link => {\n      if (link === arr[i].link) {\n        skip = true;\n      }\n    });\n    if (skip) continue;\n\n    result.push (arr[i]);\n  }\n  return result;\n};\n\nclass App extends Component {\n  constructor () {\n    super ();\n\n    this.state = {\n      album: '3zqLX',\n      n: 5,\n      imgurAlbum: null,\n      showImages: [],\n      selectedImages: [],\n      rejectedImages: [],\n    };\n\n    this.updateAlbum = this.updateAlbum.bind (this);\n    this.updateN = this.updateN.bind (this);\n    this.fetchImages = this.fetchImages.bind (this);\n  }\n\n  updateAlbum (event) {\n    this.setState ({album: event.target.value});\n  }\n\n  updateN (event) {\n    this.setState ({n: Number (event.target.value)});\n  }\n\n  fetchImages () {\n    const {album} = this.state;\n\n    fetch (`https://api.imgur.com/3/album/${album}`, {\n      headers: {\n        Authorization: 'Client-ID 7d23638f233ab99',\n      },\n    })\n      .then (response => response.json ())\n      .then (data => {\n        this.setState ({\n          imgurAlbum: data.data,\n          showImages: getRandomElements (\n            [],\n            data.data.images,\n            this.state.rejectedImages,\n            this.state.n\n          ),\n        });\n      });\n  }\n\n  selectImage (link) {\n    const newSelections = this.state.selectedImages.slice ();\n    newSelections.push (link);\n    this.setState ({selectedImages: newSelections});\n  }\n\n  removeImage (link) {\n    const newRejections = this.state.rejectedImages.slice ();\n    newRejections.push (link);\n\n    var ShowImages = this.state.showImages.slice ();\n    var newShowImages = [];\n    ShowImages.forEach (image => {\n      if (image.link !== link) {\n        newShowImages.push (image);\n      }\n    });\n\n    newShowImages = getRandomElements (\n      newShowImages,\n      this.state.imgurAlbum.images,\n      newRejections,\n      this.state.n\n    ).slice ();\n\n    console.log (newRejections, newShowImages);\n    this.setState ({\n      rejectedImages: newRejections,\n      showImages: newShowImages,\n    });\n  }\n\n  clearSelections () {\n    this.setState ({selectedImages: []});\n  }\n\n  clearRejected () {\n    this.setState ({rejectedImages: []});\n  }\n\n  render () {\n    var imagesView = null;\n\n    if (this.state.showImages) {\n      imagesView = this.state.showImages.map (image => {\n        return (\n          <div key={image.id} className=\"image\">\n            <div className=\"text-center\">\n              <Anchor href={image.link} primary label=\"Link\" />{' | '}\n              <span\n                className=\"add\"\n                onClick={() => this.selectImage (image.link)}\n              >\n                + Select\n              </span>{' | '}\n              <span\n                className=\"remove\"\n                onClick={() => this.removeImage (image.link)}\n              >\n                - Remove\n              </span>{' | '}\n            </div>\n            <Image fit=\"contain\" src={image.link} />\n            <div className=\"text-center\">\n              <Anchor href={image.link} primary label=\"Link\" />{' | '}\n              <span\n                className=\"add\"\n                onClick={() => this.selectImage (image.link)}\n              >\n                + Select\n              </span>{' | '}\n              <span\n                className=\"remove\"\n                onClick={() => this.removeImage (image.link)}\n              >\n                - Remove\n              </span>{' | '}\n              <hr />\n            </div>\n          </div>\n        );\n      });\n    }\n\n    var linksView = null;\n    if (this.state.selectedImages) {\n      linksView = this.state.selectedImages.map (image => {\n        return <span key={image}>* {image} <br /></span>;\n      });\n    }\n\n    var rejectedView = null;\n    if (this.state.rejectedImages) {\n      rejectedView = this.state.rejectedImages.map (image => {\n        return <span key={image}><s>* {image}</s> <br /></span>;\n      });\n    }\n\n    return (\n      <Grommet theme={theme}>\n        <Grid\n          areas={[\n            {name: 'nav', start: [0, 0], end: [1, 0]},\n            {name: 'controls', start: [0, 1], end: [1, 1]},\n            {name: 'links', start: [0, 2], end: [0, 2]},\n            {name: 'content', start: [1, 2], end: [1, 2]},\n          ]}\n          columns={['medium', 'flex']}\n          rows={['small', 'small', 'flex']}\n          gap=\"none\"\n        >\n          <Box\n            gridArea=\"nav\"\n            background=\"brand\"\n            align=\"center\"\n            justify=\"center\"\n            as=\"div\"\n          >\n            <div className=\"title\">imgur-rand</div>\n            <div className=\"sub-title\">\n              Select n random images from an album\n            </div>\n          </Box>\n\n          <Box gridArea=\"controls\" margin={{top: '10pt'}}>\n            <div className=\"controls\">\n              <FormField label=\"Album Hash\">\n                <TextInput placeholder=\"Ye8JD\" onChange={this.updateAlbum} />\n              </FormField>\n\n              <FormField label=\"Number of Images\">\n                <TextInput placeholder=\"5\" onChange={this.updateN} />\n              </FormField>\n\n              <Button\n                label=\"Show Samples\"\n                reverse={true}\n                onClick={this.fetchImages}\n              />\n\n              <Button\n                label=\"Clear Selections\"\n                reverse={true}\n                onClick={this.clearSelections.bind (this)}\n              />\n\n              <Button\n                label=\"Clear Rejected\"\n                reverse={true}\n                onClick={this.clearRejected.bind (this)}\n              />\n            </div>\n          </Box>\n\n          <Box gridArea=\"links\" margin={{top: '10pt'}} align=\"center\" as=\"div\">\n            <div className=\"content-container\">\n              <div className=\"links-title\">Selected Images</div>\n              <div className=\"selected-container\">{linksView}</div>\n              <div className=\"links-title\">Rejected Images</div>\n              <div className=\"rejected-container\">{rejectedView}</div>\n            </div>\n          </Box>\n\n          <Box gridArea=\"content\" margin={{top: '10pt'}}>\n            <div className=\"image-container\">\n              {imagesView}\n            </div>\n\n          </Box>\n        </Grid>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}